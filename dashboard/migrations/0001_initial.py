# Generated by Django 5.2.2 on 2025-06-08 20:05

import datetime
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('services', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DashboardAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now, unique=True)),
                ('total_users', models.PositiveIntegerField(default=0)),
                ('new_users_today', models.PositiveIntegerField(default=0)),
                ('active_users', models.PositiveIntegerField(default=0)),
                ('verified_users', models.PositiveIntegerField(default=0)),
                ('students_count', models.PositiveIntegerField(default=0)),
                ('developers_count', models.PositiveIntegerField(default=0)),
                ('instructors_count', models.PositiveIntegerField(default=0)),
                ('total_enrollments', models.PositiveIntegerField(default=0)),
                ('new_enrollments_today', models.PositiveIntegerField(default=0)),
                ('completed_courses', models.PositiveIntegerField(default=0)),
                ('active_courses', models.PositiveIntegerField(default=0)),
                ('total_tasks', models.PositiveIntegerField(default=0)),
                ('open_tasks', models.PositiveIntegerField(default=0)),
                ('in_progress_tasks', models.PositiveIntegerField(default=0)),
                ('completed_tasks', models.PositiveIntegerField(default=0)),
                ('cancelled_tasks', models.PositiveIntegerField(default=0)),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('revenue_today', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('average_order_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('total_blog_posts', models.PositiveIntegerField(default=0)),
                ('published_posts', models.PositiveIntegerField(default=0)),
                ('draft_posts', models.PositiveIntegerField(default=0)),
                ('total_comments', models.PositiveIntegerField(default=0)),
                ('approved_comments', models.PositiveIntegerField(default=0)),
                ('newsletter_subscribers', models.PositiveIntegerField(default=0)),
                ('new_subscribers_today', models.PositiveIntegerField(default=0)),
                ('contact_messages', models.PositiveIntegerField(default=0)),
                ('testimonials_received', models.PositiveIntegerField(default=0)),
                ('page_views', models.PositiveIntegerField(default=0)),
                ('unique_visitors', models.PositiveIntegerField(default=0)),
                ('bounce_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('average_session_duration', models.DurationField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Dashboard Analytics',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='DeveloperProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('availability', models.CharField(choices=[('available', 'Available'), ('busy', 'Busy'), ('unavailable', 'Unavailable')], default='available', max_length=20)),
                ('years_of_experience', models.PositiveIntegerField(default=0)),
                ('preferred_project_types', models.JSONField(blank=True, default=list, help_text='List of preferred project types')),
                ('portfolio_website', models.URLField(blank=True)),
                ('behance_url', models.URLField(blank=True)),
                ('dribbble_url', models.URLField(blank=True)),
                ('is_accepting_projects', models.BooleanField(default=True)),
                ('next_available_date', models.DateField(blank=True, null=True)),
                ('primary_skills', models.TextField(blank=True, help_text='Comma-separated list of primary skills')),
                ('secondary_skills', models.TextField(blank=True, help_text='Comma-separated list of secondary skills')),
                ('programming_languages', models.TextField(blank=True, help_text='Comma-separated list of programming languages')),
                ('frameworks', models.TextField(blank=True, help_text='Comma-separated list of frameworks')),
                ('tools', models.TextField(blank=True, help_text='Comma-separated list of tools')),
                ('minimum_project_budget', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('maximum_projects_concurrent', models.PositiveIntegerField(default=3)),
                ('work_timezone', models.CharField(blank=True, max_length=50)),
                ('github_username', models.CharField(blank=True, max_length=100)),
                ('linkedin_url', models.URLField(blank=True)),
                ('resume_file', models.FileField(blank=True, upload_to='resumes/')),
                ('completion_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_projects_completed', models.PositiveIntegerField(default=0)),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('is_verified', models.BooleanField(default=False)),
                ('featured_developer', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='developer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-featured_developer', '-average_rating', '-total_projects_completed'],
            },
        ),
        migrations.CreateModel(
            name='LearningPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField()),
                ('detailed_description', models.TextField(blank=True)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], max_length=20)),
                ('estimated_duration_weeks', models.PositiveIntegerField()),
                ('estimated_hours_per_week', models.PositiveIntegerField(default=10)),
                ('icon', models.CharField(help_text='Font Awesome icon class', max_length=50)),
                ('color', models.CharField(default='#0066FF', max_length=7)),
                ('cover_image', models.ImageField(blank=True, upload_to='learning_paths/')),
                ('prerequisites', models.TextField(blank=True, help_text='What students need to know before starting')),
                ('target_skills', models.TextField(help_text='Skills user will gain')),
                ('career_outcomes', models.TextField(blank=True, help_text='Potential career paths after completion')),
                ('modules', models.JSONField(blank=True, default=list, help_text='List of modules/sections')),
                ('milestones', models.JSONField(blank=True, default=list, help_text='Key milestones in the path')),
                ('recommended_books', models.TextField(blank=True)),
                ('external_resources', models.TextField(blank=True)),
                ('enrollment_count', models.PositiveIntegerField(default=0)),
                ('completion_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('requires_approval', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('services', models.ManyToManyField(blank=True, related_name='learning_paths', to='services.service')),
            ],
            options={
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('programming_level', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('design_level', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('cybersecurity_level', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('networking_level', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ai_level', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('marketing_level', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('courses_completed', models.PositiveIntegerField(default=0)),
                ('tasks_completed', models.PositiveIntegerField(default=0)),
                ('certifications_earned', models.PositiveIntegerField(default=0)),
                ('total_study_hours', models.PositiveIntegerField(default=0)),
                ('projects_completed', models.PositiveIntegerField(default=0)),
                ('login_streak', models.PositiveIntegerField(default=0)),
                ('longest_streak', models.PositiveIntegerField(default=0)),
                ('last_activity_date', models.DateField(auto_now=True)),
                ('total_points_earned', models.PositiveIntegerField(default=0)),
                ('preferred_learning_time', models.CharField(blank=True, choices=[('morning', 'Morning'), ('afternoon', 'Afternoon'), ('evening', 'Evening'), ('night', 'Night')], max_length=20)),
                ('learning_goals', models.TextField(blank=True, help_text="User's learning objectives")),
                ('target_completion_date', models.DateField(blank=True, null=True)),
                ('weekly_goal_hours', models.PositiveIntegerField(default=10)),
                ('current_week_hours', models.PositiveIntegerField(default=0)),
                ('last_week_reset', models.DateField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='progress', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectPortfolio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('description', models.TextField()),
                ('detailed_description', models.TextField(blank=True)),
                ('project_type', models.CharField(choices=[('web_development', 'Web Development'), ('mobile_app', 'Mobile Application'), ('desktop_app', 'Desktop Application'), ('data_science', 'Data Science'), ('ai_ml', 'AI/Machine Learning'), ('cybersecurity', 'Cybersecurity'), ('design', 'Design Project'), ('marketing', 'Marketing Campaign'), ('research', 'Research Project'), ('open_source', 'Open Source Contribution'), ('freelance', 'Freelance Project'), ('personal', 'Personal Project'), ('academic', 'Academic Project'), ('other', 'Other')], max_length=20)),
                ('status', models.CharField(choices=[('planning', 'Planning'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('on_hold', 'On Hold'), ('cancelled', 'Cancelled'), ('archived', 'Archived')], default='planning', max_length=20)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='intermediate', max_length=20)),
                ('github_url', models.URLField(blank=True)),
                ('live_demo_url', models.URLField(blank=True)),
                ('documentation_url', models.URLField(blank=True)),
                ('project_image', models.ImageField(blank=True, upload_to='portfolio_images/')),
                ('project_file', models.FileField(blank=True, upload_to='portfolio_files/')),
                ('technologies', models.TextField(help_text='Comma-separated list of technologies used')),
                ('challenges_faced', models.TextField(blank=True, help_text='Challenges encountered and how they were solved')),
                ('lessons_learned', models.TextField(blank=True)),
                ('team_size', models.PositiveIntegerField(default=1)),
                ('client_name', models.CharField(blank=True, max_length=200)),
                ('estimated_hours', models.PositiveIntegerField(default=0)),
                ('actual_hours', models.PositiveIntegerField(default=0)),
                ('budget', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('deadline', models.DateField(blank=True, null=True)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('featured_on_homepage', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_open_source', models.BooleanField(default=False)),
                ('awards', models.TextField(blank=True, help_text='Awards or recognition received for this project')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('collaborators', models.ManyToManyField(blank=True, related_name='collaborated_projects', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='portfolio_projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_featured', '-created_at'],
                'indexes': [models.Index(fields=['user', 'is_public'], name='dashboard_p_user_id_401bb7_idx'), models.Index(fields=['project_type', 'status'], name='dashboard_p_project_8050ee_idx'), models.Index(fields=['is_featured', 'is_public'], name='dashboard_p_is_feat_8ffd1c_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('login', 'User Login'), ('logout', 'User Logout'), ('profile_update', 'Profile Updated'), ('password_change', 'Password Changed'), ('course_enrollment', 'Course Enrollment'), ('course_completion', 'Course Completion'), ('task_application', 'Task Application'), ('task_assigned', 'Task Assigned'), ('task_submission', 'Task Submission'), ('task_completion', 'Task Completion'), ('blog_post', 'Blog Post Created/Updated'), ('comment', 'Comment Posted'), ('review_posted', 'Review Posted'), ('achievement_earned', 'Achievement Earned'), ('points_earned', 'Points Earned'), ('skill_added', 'Skill Added'), ('portfolio_updated', 'Portfolio Updated'), ('newsletter_subscription', 'Newsletter Subscription'), ('account_deletion', 'Account Deletion'), ('file_upload', 'File Uploaded'), ('download', 'File Downloaded'), ('search', 'Search Performed'), ('page_view', 'Page Viewed'), ('api_call', 'API Call Made'), ('email_sent', 'Email Sent'), ('error_occurred', 'Error Occurred'), ('progress_update', 'Progress Updated')], db_index=True, max_length=30)),
                ('description', models.CharField(max_length=300)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional activity data')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('session_key', models.CharField(blank=True, max_length=40)),
                ('referer', models.URLField(blank=True)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('duration', models.DurationField(blank=True, help_text='Activity duration if applicable', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Activities',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'activity_type'], name='dashboard_u_user_id_5150cc_idx'), models.Index(fields=['activity_type', 'timestamp'], name='dashboard_u_activit_dd4fea_idx'), models.Index(fields=['timestamp'], name='dashboard_u_timesta_65f91d_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserLearningPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_date', models.DateTimeField(auto_now_add=True)),
                ('completed_date', models.DateTimeField(blank=True, null=True)),
                ('last_activity_date', models.DateTimeField(auto_now=True)),
                ('progress_percentage', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('completed_modules', models.JSONField(blank=True, default=list)),
                ('current_module', models.PositiveIntegerField(default=0)),
                ('total_time_spent', models.DurationField(default=datetime.timedelta)),
                ('estimated_completion_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('motivation_level', models.PositiveIntegerField(default=5, help_text='Self-reported motivation level (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('personal_notes', models.TextField(blank=True)),
                ('feedback', models.TextField(blank=True)),
                ('rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('learning_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_enrollments', to='dashboard.learningpath')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_paths', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-started_date'],
                'unique_together': {('user', 'learning_path')},
            },
        ),
    ]
